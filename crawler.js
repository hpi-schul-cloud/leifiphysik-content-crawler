var configDefinition = [
    /*{
            name: "help",
            alias: "h",
            type: Boolean
        },*/
    {
        name: 'xml_url',
        alias: 'a',
        type: String,
        defaultValue: "<xml_url>",
        description: "The Leifiphysik XML address (endpoint)."
    }, {
        name: 'endpointuri',
        alias: 'e',
        type: String,
        defaultValue: "",
        description: "The endpoint where the fetched list(s) of items get posted to."
    }
]
/**
 * Convert/translate YoutubeÂ´s list of video meta data to intended format.
 * TODO: this should be in another place OR be generated by schema
 * @param {*} sourceItems 
 */
function getItemsMeta(sourceItems) {
    var metaItems = []
    sourceItems.map(function (item) {
        metaItems.push({
            originId: item.id,
            providerName: item.einsteller,
            url: item.url_datensatz,
            title: item.title,
            description: item.beschreibung || "No Description",
            thumbnail: item.quelle_logo_url,
            contentCategory: 'atomic',
            subject: "Physik",
            tags: item.systematikpfad || [],
            mimeType: 'text/html',
            licenses: [item.rechte]
        })
    })
    return metaItems;
}


module.exports = {
    crawl: function (config,fetcher, fetchCallback) {
        if (this.configValid(config)) {
            _config = config;
            fetcher.fetch({
                xml_url: _config.xml_url
            }, function (sourceItems) {
                fetchCallback(getItemsMeta(sourceItems));
            })
        } else {
            console.log("config for Youtube crawler not valid!")
        }
    },
    getConfigDefinition: function () {
        return configDefinition;
    },
    getConfigDefault: function () {
        var obj = {}
        configDefinition.map(function (item) {
            if (item.hasOwnProperty("defaultValue")) {
                obj[item.name] = item.defaultValue
            }
        })
        return obj;
    },
    configValid: function (config) {
        var isValid = true;
        configDefinition.map(function (item) {
            if (item.name !== "help") {
                if (!config.hasOwnProperty(item.name)) {
                    config[item.name] = item.defaultValue
                }
                isValid = isValid && (config[item.name] !== item.defaultValue)
            }
        })
        return isValid;
    }
}